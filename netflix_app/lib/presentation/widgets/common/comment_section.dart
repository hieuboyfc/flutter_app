import 'dart:math';

import 'package:flutter/material.dart';
import 'package:netflix_app/data/models/comment_model.dart';

class CommentSection extends StatefulWidget {
  final int movieId;

  const CommentSection({super.key, required this.movieId});

  @override
  CommentSectionState createState() => CommentSectionState();
}

class CommentSectionState extends State<CommentSection> {
  List<CommentModel> allComments = [];
  List<CommentModel> displayedComments = [];
  final int initialCommentsToShow = 10;
  Map<String, CommentModel> tempReplies = {};

  @override
  void initState() {
    super.initState();
    _loadComments(widget.movieId);
  }

  void _loadComments(int movieId) {
    List<CommentModel> mockComments = List.generate(50, (index) {
      return CommentModel(
        id: 'cmt$index',
        userName: 'User $index',
        avatarUrl: 'https://i.pravatar.cc/150?img=${index % 70}',
        content: 'B√¨nh lu·∫≠n cho phim $movieId - $index',
        timestamp: DateTime.now().subtract(Duration(minutes: index * 5)),
        replies: [],
        userReaction: null,
        edited: false,
        originalContent: null,
      );
    });

    setState(() {
      allComments = mockComments;
      displayedComments = allComments.take(initialCommentsToShow).toList();
    });
  }

  void _loadMoreComments() {
    int currentLength = displayedComments.length;
    int nextLength = min(currentLength + 10, allComments.length);
    setState(() {
      displayedComments = allComments.take(nextLength).toList();
    });
  }

  void _setReaction(CommentModel comment, ReactionType? reaction) {
    setState(() {
      if (comment.userReaction == reaction) {
        comment.userReaction = null; // If already liked, un-like it.
      } else {
        comment.userReaction = reaction;
      }
    });
  }

  void _showReactionMenu(CommentModel comment, BuildContext context) {
    final reactions = {
      ReactionType.like: "üëç",
      ReactionType.love: "‚ù§Ô∏è",
      ReactionType.wow: "üò≤",
      ReactionType.haha: "üòÇ",
      ReactionType.sad: "üò¢",
      ReactionType.angry: "üò°",
    };

    showModalBottomSheet(
      context: context,
      builder:
          (_) => SizedBox(
            height: 60,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children:
                  reactions.entries.map((entry) {
                    return GestureDetector(
                      onTap: () {
                        _setReaction(comment, entry.key);
                        Navigator.pop(context);
                      },
                      child: Text(
                        entry.value,
                        style: TextStyle(
                          fontSize: 30,
                          color:
                              comment.userReaction == entry.key
                                  ? Colors.blue
                                  : Colors.black,
                        ),
                      ),
                    );
                  }).toList(),
            ),
          ),
    );
  }

  void _toggleReplyBox(CommentModel comment) {
    setState(() {
      // Ki·ªÉm tra xem ƒë√£ c√≥ reply t·∫°m th·ªùi cho comment n√†y ch∆∞a
      if (tempReplies.containsKey(comment.id)) {
        // N·∫øu ƒë√£ c√≥ th√¨ kh√¥ng th√™m n·ªØa
        return;
      } else {
        // N·∫øu ch∆∞a c√≥, th√™m reply t·∫°m th·ªùi v√†o map
        tempReplies[comment.id] = CommentModel(
          id: 'temp_reply',
          userName: '',
          avatarUrl: 'https://i.pravatar.cc/150?img=1',
          content: '',
          timestamp: DateTime.now(),
        );
      }
    });
  }

  void _addReply(CommentModel parentComment) {
    setState(() {
      // Ki·ªÉm tra xem reply t·∫°m th·ªùi c√≥ t·ªìn t·∫°i kh√¥ng
      if (tempReplies.containsKey(parentComment.id)) {
        CommentModel reply = tempReplies[parentComment.id]!;

        // Th√™m b√¨nh lu·∫≠n v√†o replies c·ªßa parentComment
        parentComment.replies.add(
          CommentModel(
            id: 'reply_${parentComment.id}_${parentComment.replies.length}',
            userName: 'User Reply',
            avatarUrl: 'https://i.pravatar.cc/150?img=2',
            content: reply.content,
            // N·ªôi dung ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
            timestamp: DateTime.now(),
          ),
        );

        // Sau khi g·ª≠i, x√≥a reply t·∫°m th·ªùi kh·ªèi map
        tempReplies.remove(parentComment.id);
      }
    });
  }

  void _cancelReply(CommentModel parentComment) {
    setState(() {
      // X√≥a reply t·∫°m th·ªùi n·∫øu ng∆∞·ªùi d√πng h·ªßy
      tempReplies.remove(parentComment.id);
    });
  }

  void _editComment(CommentModel comment) {
    showDialog(
      context: context,
      builder: (_) {
        TextEditingController controller = TextEditingController(
          text: comment.content,
        );
        return AlertDialog(
          title: Text('S·ª≠a b√¨nh lu·∫≠n'),
          content: TextField(
            controller: controller,
            decoration: InputDecoration(hintText: 'Nh·∫≠p b√¨nh lu·∫≠n m·ªõi'),
          ),
          actions: [
            TextButton(
              onPressed: () {
                setState(() {
                  comment.originalContent = comment.content;
                  comment.content = controller.text;
                  comment.edited = true;
                });
                Navigator.pop(context);
              },
              child: Text('L∆∞u'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: const EdgeInsets.all(8.0),
      itemCount: displayedComments.length + 1, // Th√™m 1 cho √¥ nh·∫≠p li·ªáu
      itemBuilder: (context, index) {
        // √î nh·∫≠p li·ªáu lu√¥n hi·ªÉn th·ªã ·ªü ƒë·∫ßu
        if (index == 0) {
          return _buildNewCommentInput(); // √î nh·∫≠p li·ªáu
        }

        final comment =
            displayedComments[index - 1]; // L·∫•y b√¨nh lu·∫≠n sau √¥ nh·∫≠p li·ªáu

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildCommentTile(comment), // Hi·ªÉn th·ªã b√¨nh lu·∫≠n
            if (comment.replies.isNotEmpty)
              Padding(
                padding: const EdgeInsets.only(left: 40),
                child: Column(
                  children: comment.replies.map(_buildCommentTile).toList(),
                ),
              ),
          ],
        );
      },
    );
  }

  // Widget ƒë·ªÉ hi·ªÉn th·ªã √¥ nh·∫≠p li·ªáu m·ªõi
  Widget _buildNewCommentInput() {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        // CƒÉn tr√°i cho t√™n ng∆∞·ªùi d√πng v√† √¥ nh·∫≠p li·ªáu
        children: [
          // T√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p
          Padding(
            padding: const EdgeInsets.only(left: 58.0, bottom: 8.0, top: 4.0),
            child: Text(
              'ZimJi', // T√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p (c√≥ th·ªÉ l·∫•y t·ª´ user profile)
              style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
            ),
          ),
          // Row ch·ª©a avatar v√† √¥ nh·∫≠p li·ªáu
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            // ƒê·∫£m b·∫£o cƒÉn ch·ªânh avatar v√† input c√πng h√†ng
            children: [
              // Avatar c·ªßa ng∆∞·ªùi d√πng (tƒÉng k√≠ch th∆∞·ªõc avatar)
              CircleAvatar(
                backgroundImage: NetworkImage(''),
                // Th√™m URL avatar c·ªßa ng∆∞·ªùi d√πng
                radius: 24, // TƒÉng k√≠ch th∆∞·ªõc avatar (ƒë·∫∑t radius l·ªõn h∆°n)
              ),
              const SizedBox(width: 8),
              // Expanded ƒë·ªÉ TextField chi·∫øm h·∫øt kh√¥ng gian c√≤n l·∫°i
              Expanded(
                child: SizedBox(
                  height: 80, // ƒê·∫∑t chi·ªÅu cao cho TextField (gi·ªëng TextArea)
                  child: TextField(
                    onChanged: (text) {
                      // C·∫≠p nh·∫≠t n·ªôi dung b√¨nh lu·∫≠n
                      setState(() {
                        // C·∫≠p nh·∫≠t b√¨nh lu·∫≠n m·ªõi
                      });
                    },
                    maxLines: 5, // ƒê·ªÉ TextField c√≥ th·ªÉ m·ªü r·ªông l√™n t·ªõi 5 d√≤ng
                    minLines: 3, // ƒê·∫£m b·∫£o chi·ªÅu cao t·ªëi thi·ªÉu
                    decoration: InputDecoration(
                      hintText: "Vi·∫øt b√¨nh lu·∫≠n...",
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      contentPadding: const EdgeInsets.symmetric(
                        vertical: 10,
                        horizontal: 16,
                      ),
                      filled: true,
                      fillColor: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
          // Row ch·ª©a n√∫t g·ª≠i v√† h·ªßy, cƒÉn ph·∫£i
          Padding(
            padding: const EdgeInsets.only(top: 6.0),
            // Gi·∫£m kho·∫£ng c√°ch gi·ªØa √¥ nh·∫≠p li·ªáu v√† n√∫t
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              // CƒÉn c√°c n√∫t v·ªÅ ph√≠a b√™n ph·∫£i
              children: [
                TextButton(
                  onPressed: () {
                    // G·ª≠i b√¨nh lu·∫≠n
                  },
                  child: const Text("G·ª≠i"),
                ),
                const SizedBox(width: 8),
                // Kho·∫£ng c√°ch nh·ªè gi·ªØa "G·ª≠i" v√† "Nh·∫≠p l·∫°i"
                TextButton(
                  onPressed: () {
                    // H·ªßy b√¨nh lu·∫≠n
                  },
                  child: const Text("Nh·∫≠p l·∫°i"),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCommentTile(CommentModel comment) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // CircleAvatar
          CircleAvatar(
            backgroundImage: NetworkImage(comment.avatarUrl),
            radius: 24, // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o CircleAvatar l·ªõn h∆°n
          ),
          const SizedBox(width: 8),
          // Expanded ƒë·ªÉ Container v√† CircleAvatar c√≥ k√≠ch th∆∞·ªõc ƒë·ªÅu nhau
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white10,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        comment.userName,
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 4),
                      Text(comment.content),
                      if (comment.edited)
                        Text(
                          '(ƒê√£ ch·ªânh s·ª≠a)',
                          style: TextStyle(fontSize: 12, color: Colors.grey),
                        ),
                    ],
                  ),
                ),
                Row(
                  children: [
                    GestureDetector(
                      onLongPress: () => _showReactionMenu(comment, context),
                      child: TextButton.icon(
                        onPressed:
                            () => _setReaction(comment, ReactionType.like),
                        icon: Icon(getReactionIcon(comment.userReaction)),
                        label: Text(getReactionText(comment.userReaction)),
                        style: TextButton.styleFrom(
                          foregroundColor: getReactionColor(
                            comment.userReaction,
                          ), // L·∫•y m√†u s·∫Øc t·ª´ reaction
                        ),
                      ),
                    ),
                    TextButton(
                      onPressed: () => _toggleReplyBox(comment),
                      child: const Text(
                        "Tr·∫£ l·ªùi",
                        style: TextStyle(fontSize: 12),
                      ),
                    ),
                    TextButton(
                      onPressed: () => _editComment(comment),
                      child: const Text("S·ª≠a", style: TextStyle(fontSize: 12)),
                    ),
                  ],
                ),
                // N·∫øu c√≥ reply (tr·∫£ l·ªùi), hi·ªÉn th·ªã TextField v√† n√∫t h·ªßy
                if (tempReplies.containsKey(comment.id))
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    // CƒÉn tr√°i cho to√†n b·ªô Column
                    children: [
                      // T√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p (hi·ªÉn th·ªã tr√™n ƒë·∫ßu √¥ nh·∫≠p li·ªáu)
                      Padding(
                        padding: const EdgeInsets.only(
                          left: 46.0,
                          bottom: 6.0,
                          top: 10.0,
                        ),
                        // Th√™m kho·∫£ng c√°ch t·ª´ tr√™n cho t√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p
                        child: Text(
                          'ZimJi', // T√™n ng∆∞·ªùi ƒëƒÉng nh·∫≠p
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ),

                      // Row ch·ª©a avatar v√† TextField ƒë·ªÉ nh·∫≠p ph·∫£n h·ªìi
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        // CƒÉn gi·ªØa ƒë·ªÉ Avatar v√† TextField ƒë·ªÅu cƒÉn ch·ªânh ƒë√∫ng
                        children: [
                          // Avatar c·ªßa ng∆∞·ªùi ƒëƒÉng nh·∫≠p
                          CircleAvatar(
                            backgroundImage: NetworkImage(''),
                            // Avatar ng∆∞·ªùi ƒëƒÉng nh·∫≠p
                            radius: 18, // ƒê·∫∑t radius ph√π h·ª£p
                          ),
                          const SizedBox(width: 8),
                          // Expanded ƒë·ªÉ TextField chi·∫øm h·∫øt kh√¥ng gian c√≤n l·∫°i
                          Expanded(
                            child: SizedBox(
                              height: 38,
                              // ƒê·∫£m b·∫£o chi·ªÅu cao c·ªßa container ƒë·ªÉ n√≥ ngang b·∫±ng v·ªõi avatar
                              child: TextField(
                                onChanged: (text) {
                                  setState(() {
                                    // C·∫≠p nh·∫≠t n·ªôi dung t·∫°m th·ªùi v√†o tempReplies
                                    tempReplies[comment.id]?.content = text;
                                  });
                                },
                                controller: TextEditingController(
                                  text: tempReplies[comment.id]?.content ?? '',
                                ),
                                decoration: InputDecoration(
                                  hintText: "Vi·∫øt ph·∫£n h·ªìi...",
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(12),
                                    borderSide: BorderSide(
                                      color: Colors.grey.withOpacity(0.5),
                                      width: 1,
                                    ),
                                  ),
                                  contentPadding: const EdgeInsets.symmetric(
                                    vertical: 10,
                                    horizontal: 16,
                                  ),
                                  filled: true,
                                  fillColor: Colors.white,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),

                      // Row ch·ª©a c√°c n√∫t "G·ª≠i" v√† "H·ªßy" cƒÉn ph·∫£i
                      Row(
                        children: [
                          Spacer(), // Spacer gi√∫p ƒë·∫©y c√°c n√∫t v·ªÅ ph√≠a b√™n ph·∫£i
                          TextButton(
                            onPressed: () {
                              if (tempReplies[comment.id]?.content.isNotEmpty ??
                                  false) {
                                _addReply(comment); // G·ª≠i reply khi b·∫•m "G·ª≠i"
                              }
                            },
                            child: const Text("G·ª≠i"),
                          ),
                          TextButton(
                            onPressed: () => _cancelReply(comment), // H·ªßy reply
                            child: const Text("H·ªßy"),
                          ),
                        ],
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // H√†m l·∫•y icon reaction t∆∞∆°ng ·ª©ng
  IconData getReactionIcon(ReactionType? reaction) {
    switch (reaction) {
      case ReactionType.love:
        return Icons.favorite;
      case ReactionType.haha:
        return Icons.emoji_emotions;
      case ReactionType.wow:
        return Icons.emoji_objects;
      case ReactionType.sad:
        return Icons.sentiment_dissatisfied;
      case ReactionType.angry:
        return Icons.emoji_flags;
      default:
        return Icons.thumb_up;
    }
  }

  // H√†m l·∫•y m√†u cho reaction
  Color getReactionColor(ReactionType? reaction) {
    switch (reaction) {
      case ReactionType.like:
        return Colors.blue;
      case ReactionType.love:
        return Colors.red;
      case ReactionType.wow:
        return Colors.amber;
      case ReactionType.haha:
        return Colors.yellow;
      case ReactionType.sad:
        return Colors.blueGrey;
      case ReactionType.angry:
        return Colors.redAccent;
      default:
        return Colors.white60;
    }
  }

  // H√†m l·∫•y text cho reaction
  String getReactionText(ReactionType? reaction) {
    switch (reaction) {
      case ReactionType.love:
        return "Y√™u th√≠ch";
      case ReactionType.haha:
        return "Haha";
      case ReactionType.wow:
        return "Wow";
      case ReactionType.sad:
        return "Bu·ªìn";
      case ReactionType.angry:
        return "Ph·∫´n n·ªô";
      default:
        return "Th√≠ch";
    }
  }
}
