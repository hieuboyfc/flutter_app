import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:netflix_app/data/models/movie_model.dart';
import 'package:netflix_app/data/services/movie_service.dart';

class MovieDetailScreen extends StatefulWidget {
  final int movieId;

  const MovieDetailScreen({super.key, required this.movieId});

  @override
  MovieDetailScreenState createState() => MovieDetailScreenState();
}

class MovieDetailScreenState extends State<MovieDetailScreen> {
  late Future<MovieModel?> movieFuture;

  @override
  void initState() {
    super.initState();
    movieFuture = MovieService.getById(widget.movieId);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Chi ti·∫øt phim"),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            if (GoRouter.of(context).canPop()) {
              GoRouter.of(context).pop();
            } else {
              context.go('/home');
            }
          },
        ),
      ),
      body: FutureBuilder<MovieModel?>(
        future: movieFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text("L·ªói: ${snapshot.error}"));
          } else if (!snapshot.hasData) {
            return const Center(child: Text("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu"));
          }

          final movie = snapshot.data!;

          return SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // üìå ·∫¢nh + Th√¥ng tin phim (CƒÉn gi·ªØa, t·ª± co gi√£n)
                Row(
                  mainAxisAlignment: MainAxisAlignment.center, // üìå CƒÉn gi·ªØa to√†n b·ªô n·ªôi dung
                  crossAxisAlignment: CrossAxisAlignment.start, // üìå Ch·ªØ s·∫Ω n·∫±m tr√™n c√πng
                  children: [
                    // üìå ·∫¢nh phim
                    Flexible(
                      flex: 2, // Chia t·ªâ l·ªá 2:3 gi·ªØa ·∫£nh v√† ch·ªØ
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(10.0),
                        child: Image.network(
                          movie.image,
                          width: double.infinity, // üìå ƒê·∫£m b·∫£o ·∫£nh co gi√£n t·ªët
                          height: 270,
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),

                    // üìå Kho·∫£ng c√°ch gi·ªØa ·∫£nh v√† ch·ªØ
                    const SizedBox(width: 20),

                    // üìå Th√¥ng tin phim (CƒÉn gi·ªØa)
                    Flexible(
                      flex: 3, // Chia t·ªâ l·ªá 2:3 gi·ªØa ·∫£nh v√† ch·ªØ
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start, // üìå CƒÉn gi·ªØa ch·ªØ
                        children: [
                          Text(
                            movie.title,
                            style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                            textAlign: TextAlign.center, // üìå CƒÉn gi·ªØa vƒÉn b·∫£n
                          ),
                          const SizedBox(height: 8),
                          Text(
                            "Th·ªÉ lo·∫°i: ${movie.genres.join(", ")}",
                            style: const TextStyle(fontSize: 16),
                            textAlign: TextAlign.center, // üìå CƒÉn gi·ªØa vƒÉn b·∫£n
                          ),
                          Text(
                            "Ng√†y ph√°t h√†nh: ${movie.releaseDate}",
                            style: const TextStyle(fontSize: 16),
                            textAlign: TextAlign.center,
                          ),
                          Text(
                            "ƒê√°nh gi√°: ${movie.rating} ‚≠ê (${movie.voteCount} l∆∞·ª£t)",
                            style: const TextStyle(fontSize: 16),
                            textAlign: TextAlign.center,
                          ),
                          Text(
                            "Di·ªÖn vi√™n: ${movie.actors.join(", ")}",
                            style: const TextStyle(fontSize: 16),
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 16),

                // üìå 2Ô∏è‚É£ N·ªôi dung phim
                const Text(
                  "N·ªôi dung:",
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Text(movie.overview, style: const TextStyle(fontSize: 16)),

                const SizedBox(height: 24),

                // üìå 3Ô∏è‚É£ N√∫t xem phim + Th√™m v√†o y√™u th√≠ch
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton.icon(
                      icon: const Icon(Icons.play_arrow),
                      label: const Text("Xem phim"),
                      onPressed: () {
                        // TODO: Chuy·ªÉn sang trang xem phim
                      },
                    ),
                    OutlinedButton.icon(
                      icon: const Icon(Icons.favorite_border),
                      label: const Text("Th√™m v√†o y√™u th√≠ch"),
                      onPressed: () {
                        // TODO: X·ª≠ l√Ω th√™m v√†o danh s√°ch y√™u th√≠ch
                      },
                    ),
                  ],
                ),

                const SizedBox(height: 24),

                // üìå 4Ô∏è‚É£ B√¨nh lu·∫≠n (T·∫°m th·ªùi l√† danh s√°ch gi·∫£ l·∫≠p)
                const Text(
                  "B√¨nh lu·∫≠n:",
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                ..._buildFakeComments(),
              ],
            ),
          );
        },
      ),
    );
  }

  // üî• Danh s√°ch b√¨nh lu·∫≠n + Tr·∫£ l·ªùi b√¨nh lu·∫≠n
  List<Widget> _buildFakeComments() {
    List<Map<String, dynamic>> fakeComments = [
      {
        "name": "Nguy·ªÖn VƒÉn A",
        "comment": "Phim r·∫•t hay!",
        "replies": [
          {"name": "Tr·∫ßn Th·ªã B", "comment": "ƒê√∫ng r·ªìi, m√¨nh c≈©ng th√≠ch l·∫Øm!"},
          {"name": "L√™ VƒÉn C", "comment": "B·∫°n coi ·ªü ƒë√¢u th·∫ø?"},
        ],
      },
      {
        "name": "Tr·∫ßn Th·ªã D",
        "comment": "M√¨nh th√≠ch di·ªÖn vi√™n ch√≠nh ‚ù§Ô∏è",
        "replies": [
          {"name": "Nguy·ªÖn VƒÉn E", "comment": "Chu·∫©n lu√¥n, di·ªÖn qu√° ƒë·ªânh!"},
        ],
      },
      {"name": "L√™ VƒÉn F", "comment": "C·∫£nh quay m√£n nh√£n qu√°!", "replies": []},
    ];

    return fakeComments.map((cmt) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // üìå B√¨nh lu·∫≠n ch√≠nh
          _buildCommentItem(cmt["name"], cmt["comment"]),

          // üìå Danh s√°ch c√¢u tr·∫£ l·ªùi (n·∫øu c√≥)
          if (cmt["replies"].isNotEmpty)
            Padding(
              padding: const EdgeInsets.only(left: 40), // üìå L√πi v√†o ƒë·ªÉ l√†m reply
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children:
                    cmt["replies"]
                        .map<Widget>((reply) => _buildCommentItem(reply["name"], reply["comment"]))
                        .toList(),
              ),
            ),

          // üìå Kho·∫£ng c√°ch gi·ªØa c√°c b√¨nh lu·∫≠n
          const SizedBox(height: 8),
        ],
      );
    }).toList();
  }

  // ‚úÖ Widget hi·ªÉn th·ªã 1 b√¨nh lu·∫≠n
  Widget _buildCommentItem(String name, String comment) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // ·∫¢nh ƒë·∫°i di·ªán
        const CircleAvatar(
          backgroundColor: Colors.blue,
          child: Icon(Icons.person, color: Colors.white),
        ),
        const SizedBox(width: 8),

        // N·ªôi dung b√¨nh lu·∫≠n
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),
              Text(comment),
            ],
          ),
        ),
      ],
    );
  }
}
